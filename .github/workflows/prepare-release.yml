name: "Prepare CodeQL Coding Standards release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: |
          The version to release (MUST follow semantic versioning).
        required: true
      ref:
        description: |
          The git commit, branch, or tag to release from.
        required: true

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write

env:
  RELEASE_VERSION: ${{ inputs.version }}

jobs:
  prepare-release:
    outputs:
      pull-request-head-sha: ${{ steps.determine-pr-head-sha.outputs.pull-request-head-sha }}
    name: "Prepare release"
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Validate release precondition
        env:
          RELEASE_VERSION: ${{ inputs.version }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          read -r release type < <(gh release list | awk -v release="v$RELEASE_VERSION" '$1 ~ release { print $1,$2; ++n } END { if (n == 0) print "undefined", "undefined" }')
          if [[ "$release" == "undefined" ]]; then
            echo "Release v$RELEASE_VERSION does not exist. Proceeding"
            echo "create_draft_release=true" >> "$GITHUB_ENV"
          else
            if [[ "$type" != "Draft" ]]; then
              echo "Release '$release' already exists and is not a draft, but has release state '$type'. Cannot proceed"
              exit 1
            else
              echo "Release '$release' already exists and is a draft. Proceeding"
              echo "create_draft_release=false" >> "$GITHUB_ENV"
            fi
          fi

          release_pr=$(gh pr view rc/$RELEASE_VERSION --json title,state,number)

          if [[ ! -z "$release_pr" ]]; then

            pr_title=$(echo "$release_pr" | jq -r '.title')
            pr_state=$(echo "$release_pr" | jq -r '.state')
            pr_number=$(echo "$release_pr" | jq -r '.number')

            echo "Found PR '$pr_title' with state '$pr_state'"

            if [[ "$pr_title" == "Release v$RELEASE_VERSION" ]] && [[ "$pr_state" != "CLOSED" ]]; then
              echo "Release PR is not closed, deleting it to proceed"
              gh pr close --delete-branch $pr_number
            fi
          fi

          if [[ ! -z $(git ls-remote --heads origin rc/$RELEASE_VERSION) ]]; then
            echo "Deleting existing release branch"
            git push origin --delete rc/$RELEASE_VERSION
          fi

          if [[ ! -z $(git ls-remote --heads origin feature/update-user-manual-for-$RELEASE_VERSION) ]]; then
            echo "Deleting existing feature branch"
            git push origin --delete feature/update-user-manual-for-$RELEASE_VERSION
          fi

      - name: Configure git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install release script dependencies
        run: pip install -r scripts/release/requirements.txt

      - name: Validate version
        run: |
          python scripts/release/validate-version.py "$RELEASE_VERSION"

      - name: Create release branch
        run: |
          git switch -c rc/$RELEASE_VERSION
          git push --set-upstream origin rc/$RELEASE_VERSION

      - name: Create draft release
        if: env.create_draft_release == 'true'
        env:
          RELEASE_VERSION: ${{ inputs.version }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release create \
          -R $GITHUB_REPOSITORY \
          --title "v$RELEASE_VERSION" \
          --draft \
          --target rc/$RELEASE_VERSION \
          $RELEASE_VERSION

      - name: Create feature branch for PR
        run: |
          git switch -c feature/update-user-manual-for-$RELEASE_VERSION
          git push --set-upstream origin feature/update-user-manual-for-$RELEASE_VERSION

          find docs -name 'user_manual.md' | xargs sed -i "s/code-scanning-cpp-query-pack-.*\.zip\`/code-scanning-cpp-query-pack-$RELEASE_VERSION.zip\`/"
          find docs -name 'user_manual.md' | xargs sed -i "s/supported_rules_list_.*\.csv\`/supported_rules_list_$RELEASE_VERSION.csv\`/"
          find docs -name 'user_manual.md' | xargs sed -i "s/supported_rules_list_.*\.md\`/supported_rules_list_$RELEASE_VERSION.md\`/"
          find docs -name 'user_manual.md' | xargs sed -i "s/user_manual_.*\.md\`/user_manual_$RELEASE_VERSION.md\`/"
          find docs -name 'user_manual.md' | xargs sed -i "s/This user manual documents release \`.*\` of/This user manual documents release \`$RELEASE_VERSION\` of/"

          git add -u .
          git commit -m "Update version"
          git push

      - name: Create release PR
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_DISPATCH_TOKEN }}
        run: |
          gh pr create \
          -R $GITHUB_REPOSITORY \
          --title "Release v$RELEASE_VERSION" \
          --body "This PR releases codeql-coding-standards version $RELEASE_VERSION." \
          --base rc/$RELEASE_VERSION \
          --head feature/update-user-manual-for-$RELEASE_VERSION \
          --draft